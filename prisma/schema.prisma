generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  image         String?
  email         String?   @unique
  emailVerified DateTime?

  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
  conversationIds String[]       @db.ObjectId

  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])
  seenMessageIds String[]  @db.ObjectId

  emailToken    EmailVerificationToken?
  messages      Message[]
  accounts      Account[]
  accessTokens  RefreshToken[]
  refreshTokens AccessToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  salt              String?
  hashPassword      String?
  provider          String?
  providerAccountId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccessToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  token   String
  expires DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

model RefreshToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  token   String
  expires DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

model EmailVerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  token   String   @unique
  expires DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  isGroup       Boolean?
  lastMessageAt DateTime @default(now())

  users   User[]   @relation(fields: [userIds], references: [id])
  userIds String[] @db.ObjectId

  messages Message[]

  createdAt DateTime @default(now())
}

model Message {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  body String?

  images Image[]

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String @db.ObjectId

  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])
  seenIds String[] @db.ObjectId

  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String       @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String?  @db.ObjectId
}
