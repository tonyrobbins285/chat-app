// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String                  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?                 @unique
  emailVerified DateTime?
  image         String?
  emailToken    EmailVerificationToken?

  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
  conversationIds String[]       @db.ObjectId

  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])
  seenMessageIds String[]  @db.ObjectId

  messages Message[]
  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String?
  providerAccountId String?
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  hashedPassword    String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model EmailVerificationToken {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  token          String
  tokenExpiresAt DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  isGroup       Boolean?
  lastMessageAt DateTime @default(now())

  users   User[]   @relation(fields: [userIds], references: [id])
  userIds String[] @db.ObjectId

  messages Message[]

  createdAt DateTime @default(now())
}

model Message {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  body String?

  images Image[]

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String @db.ObjectId

  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])
  seenIds String[] @db.ObjectId

  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String       @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String?  @db.ObjectId
}
